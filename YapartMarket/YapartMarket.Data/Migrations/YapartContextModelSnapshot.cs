// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YapartMarket.Data;

namespace YapartMarket.Data.Migrations
{
    [DbContext(typeof(YapartContext))]
    partial class YapartContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("YapartMarket.Core.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int?>("PictureId")
                        .HasColumnName("picture_id");

                    b.HasKey("Id")
                        .HasName("pk_brands");

                    b.ToTable("brands");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_carts");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.CartLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasColumnName("article");

                    b.Property<int>("CartId")
                        .HasColumnName("cart_id");

                    b.Property<string>("Descriptions")
                        .HasColumnName("descriptions");

                    b.Property<decimal>("Price")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_cart_lines");

                    b.HasIndex("CartId")
                        .HasName("ix_cart_lines_cart_id");

                    b.ToTable("cart_lines");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("EnglishName")
                        .HasColumnName("english_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int?>("SectionId")
                        .HasColumnName("section_id");

                    b.Property<bool>("Show")
                        .HasColumnName("show");

                    b.Property<int>("Sort")
                        .HasColumnName("sort");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("SectionId")
                        .HasName("ix_categories_section_id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Mark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<bool>("Show")
                        .HasColumnName("show");

                    b.HasKey("Id")
                        .HasName("pk_marks");

                    b.ToTable("marks");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("MarkId")
                        .HasColumnName("mark_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<string>("Years")
                        .HasColumnName("years");

                    b.HasKey("Id")
                        .HasName("pk_models");

                    b.HasIndex("MarkId")
                        .HasName("ix_models_mark_id");

                    b.ToTable("models");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Modification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("ModelId")
                        .HasColumnName("model_id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("Sort")
                        .HasColumnName("sort");

                    b.Property<string>("Url")
                        .HasColumnName("url");

                    b.Property<string>("Years")
                        .HasColumnName("years");

                    b.HasKey("Id")
                        .HasName("pk_modifications");

                    b.HasIndex("ModelId")
                        .HasName("ix_modifications_model_id");

                    b.ToTable("modifications");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .HasColumnName("city");

                    b.Property<Guid>("ClientGuid")
                        .HasColumnName("client_guid");

                    b.Property<string>("Comment")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnName("creation_time");

                    b.Property<bool>("IsClosed")
                        .HasColumnName("is_closed");

                    b.Property<bool>("IsSent")
                        .HasColumnName("is_sent");

                    b.Property<string>("PaymentMethod")
                        .HasColumnName("payment_method");

                    b.Property<string>("Phone")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnName("shipped_date");

                    b.Property<string>("ShippingMethod")
                        .HasColumnName("shipping_method");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Articul")
                        .HasColumnName("articul");

                    b.Property<Guid>("ClientGuid")
                        .HasColumnName("client_guid");

                    b.Property<string>("Comment")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnName("creation_time");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsClosed")
                        .HasColumnName("is_closed");

                    b.Property<int?>("OrderId")
                        .HasColumnName("order_id");

                    b.Property<string>("OrderStatus")
                        .HasColumnName("order_status");

                    b.Property<string>("OrderStatusComment")
                        .HasColumnName("order_status_comment");

                    b.Property<decimal>("PriceWithDiscount")
                        .HasColumnName("price_with_discount");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_order_items");

                    b.HasIndex("OrderId")
                        .HasName("ix_order_items_order_id");

                    b.ToTable("order_items");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("BrandId")
                        .HasColumnName("brand_id");

                    b.Property<int?>("MarkId")
                        .HasColumnName("mark_id");

                    b.Property<int?>("ModelId")
                        .HasColumnName("model_id");

                    b.Property<int?>("ModificationId")
                        .HasColumnName("modification_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnName("path");

                    b.Property<int?>("ProductId")
                        .HasColumnName("product_id");

                    b.Property<DateTime?>("UpdateTimestamp")
                        .HasColumnName("update_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_pictures");

                    b.HasIndex("BrandId")
                        .IsUnique()
                        .HasName("ix_pictures_brand_id");

                    b.HasIndex("MarkId")
                        .HasName("ix_pictures_mark_id");

                    b.HasIndex("ModelId")
                        .HasName("ix_pictures_model_id");

                    b.HasIndex("ModificationId")
                        .HasName("ix_pictures_modification_id");

                    b.HasIndex("ProductId")
                        .HasName("ix_pictures_product_id");

                    b.ToTable("pictures");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasColumnName("article")
                        .HasMaxLength(50);

                    b.Property<int?>("BrandId")
                        .HasColumnName("brand_id");

                    b.Property<string>("Brief")
                        .HasColumnName("brief");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("category_id");

                    b.Property<string>("Characteristic")
                        .HasColumnName("characteristic");

                    b.Property<int>("DaysDelivery")
                        .HasColumnName("days_delivery");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnName("descriptions");

                    b.Property<bool>("Discount")
                        .HasColumnName("discount");

                    b.Property<string>("Keywords")
                        .HasColumnName("keywords");

                    b.Property<decimal>("OldPrice")
                        .HasColumnName("old_price");

                    b.Property<bool>("Popular")
                        .HasColumnName("popular");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("RemoveMarketplace")
                        .HasColumnName("remove_marketplace");

                    b.Property<string>("ShortArticle")
                        .HasColumnName("short_article");

                    b.Property<bool>("Show")
                        .HasColumnName("show");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("BrandId")
                        .HasName("ix_products_brand_id");

                    b.HasIndex("CategoryId")
                        .HasName("ix_products_category_id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.ProductModification", b =>
                {
                    b.Property<int?>("ProductId")
                        .HasColumnName("product_id");

                    b.Property<int?>("ModificationId")
                        .HasColumnName("modification_id");

                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.HasKey("ProductId", "ModificationId")
                        .HasName("pk_product_modifications");

                    b.HasIndex("ModificationId")
                        .HasName("ix_product_modifications_modification_id");

                    b.ToTable("product_modifications");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("GroupId")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<bool>("Show")
                        .HasColumnName("show");

                    b.Property<int>("Sort")
                        .HasColumnName("sort");

                    b.HasKey("Id")
                        .HasName("pk_sections");

                    b.HasIndex("GroupId")
                        .HasName("ix_sections_group_id");

                    b.ToTable("sections");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.CartLine", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Cart", "Cart")
                        .WithMany("Lines")
                        .HasForeignKey("CartId")
                        .HasConstraintName("fk_cart_lines_carts_cart_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Category", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Section", "Section")
                        .WithMany("Categories")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("fk_categories_sections_section_id");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Model", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Mark", "Mark")
                        .WithMany("Models")
                        .HasForeignKey("MarkId")
                        .HasConstraintName("fk_models_marks_mark_id");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Modification", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Model", "Model")
                        .WithMany("Modifications")
                        .HasForeignKey("ModelId")
                        .HasConstraintName("fk_modifications_models_model_id");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.OrderItem", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_order_items_orders_order_id");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Picture", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Brand", "Brand")
                        .WithOne("Picture")
                        .HasForeignKey("YapartMarket.Core.Models.Picture", "BrandId")
                        .HasConstraintName("fk_pictures_brands_brand_id");

                    b.HasOne("YapartMarket.Core.Models.Mark", "Mark")
                        .WithMany("Pictures")
                        .HasForeignKey("MarkId")
                        .HasConstraintName("fk_pictures_marks_mark_id");

                    b.HasOne("YapartMarket.Core.Models.Model", "Model")
                        .WithMany("Pictures")
                        .HasForeignKey("ModelId")
                        .HasConstraintName("fk_pictures_models_model_id");

                    b.HasOne("YapartMarket.Core.Models.Modification", "Modification")
                        .WithMany("Pictures")
                        .HasForeignKey("ModificationId")
                        .HasConstraintName("fk_pictures_modifications_modification_id");

                    b.HasOne("YapartMarket.Core.Models.Product", "Product")
                        .WithMany("Pictures")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_pictures_products_product_id");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Product", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("fk_products_brands_brand_id");

                    b.HasOne("YapartMarket.Core.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_products_categories_category_id");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.ProductModification", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Modification", "Modification")
                        .WithMany("ProductModifications")
                        .HasForeignKey("ModificationId")
                        .HasConstraintName("fk_product_modifications_modifications_modification_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("YapartMarket.Core.Models.Product", "Product")
                        .WithMany("ProductModifications")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_product_modifications_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Section", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_sections_groups_group_id");
                });
#pragma warning restore 612, 618
        }
    }
}
