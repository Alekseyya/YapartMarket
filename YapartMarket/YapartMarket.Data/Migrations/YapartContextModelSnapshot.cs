// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YapartMarket.Data;

namespace YapartMarket.Data.Migrations
{
    [DbContext(typeof(YapartContext))]
    partial class YapartContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("YapartMarket.Core.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PictureId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.CartLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartLines");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("EnglishName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SectionId")
                        .HasColumnType("integer");

                    b.Property<bool>("Show")
                        .HasColumnType("boolean");

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Mark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Show")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("MarkId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Years")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Modification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("ModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("Years")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Modifications");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<Guid>("ClientGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ShippingMethod")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Articul")
                        .HasColumnType("text");

                    b.Property<Guid>("ClientGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("text");

                    b.Property<string>("OrderStatusComment")
                        .HasColumnType("text");

                    b.Property<decimal>("PriceWithDiscount")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int?>("MarkId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModificationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTimestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrandId")
                        .IsUnique();

                    b.HasIndex("MarkId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ModificationId");

                    b.HasIndex("ProductId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer");

                    b.Property<string>("Brief")
                        .HasColumnType("text");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Characteristic")
                        .HasColumnType("text");

                    b.Property<int>("DaysDelivery")
                        .HasColumnType("integer");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Discount")
                        .HasColumnType("boolean");

                    b.Property<string>("Keywords")
                        .HasColumnType("text");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("numeric");

                    b.Property<bool>("Popular")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("RemoveMarketplace")
                        .HasColumnType("boolean");

                    b.Property<string>("ShortArticle")
                        .HasColumnType("text");

                    b.Property<bool>("Show")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.ProductModification", b =>
                {
                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModificationId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "ModificationId");

                    b.HasIndex("ModificationId");

                    b.ToTable("ProductModifications");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AccessProductTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Show")
                        .HasColumnType("boolean");

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.CartLine", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Cart", "Cart")
                        .WithMany("Lines")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Category", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Section", "Section")
                        .WithMany("Categories")
                        .HasForeignKey("SectionId");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Model", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Mark", "Mark")
                        .WithMany("Models")
                        .HasForeignKey("MarkId");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Modification", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Model", "Model")
                        .WithMany("Modifications")
                        .HasForeignKey("ModelId");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.OrderItem", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Picture", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Brand", "Brand")
                        .WithOne("Picture")
                        .HasForeignKey("YapartMarket.Core.Models.Picture", "BrandId");

                    b.HasOne("YapartMarket.Core.Models.Mark", "Mark")
                        .WithMany("Pictures")
                        .HasForeignKey("MarkId");

                    b.HasOne("YapartMarket.Core.Models.Model", "Model")
                        .WithMany("Pictures")
                        .HasForeignKey("ModelId");

                    b.HasOne("YapartMarket.Core.Models.Modification", "Modification")
                        .WithMany("Pictures")
                        .HasForeignKey("ModificationId");

                    b.HasOne("YapartMarket.Core.Models.Product", "Product")
                        .WithMany("Pictures")
                        .HasForeignKey("ProductId");

                    b.Navigation("Brand");

                    b.Navigation("Mark");

                    b.Navigation("Model");

                    b.Navigation("Modification");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Product", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("YapartMarket.Core.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.ProductModification", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Modification", "Modification")
                        .WithMany("ProductModifications")
                        .HasForeignKey("ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YapartMarket.Core.Models.Product", "Product")
                        .WithMany("ProductModifications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modification");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Section", b =>
                {
                    b.HasOne("YapartMarket.Core.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Brand", b =>
                {
                    b.Navigation("Picture");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Cart", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Mark", b =>
                {
                    b.Navigation("Models");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Model", b =>
                {
                    b.Navigation("Modifications");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Modification", b =>
                {
                    b.Navigation("Pictures");

                    b.Navigation("ProductModifications");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Product", b =>
                {
                    b.Navigation("Pictures");

                    b.Navigation("ProductModifications");
                });

            modelBuilder.Entity("YapartMarket.Core.Models.Section", b =>
                {
                    b.Navigation("Categories");
                });
#pragma warning restore 612, 618
        }
    }
}
